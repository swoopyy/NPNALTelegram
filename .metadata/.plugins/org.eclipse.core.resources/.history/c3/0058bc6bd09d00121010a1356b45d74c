/**
 */
package highlevelnets.common.impl;

import highlevelnets.common.CommonFactory;
import highlevelnets.common.CommonPackage;
import highlevelnets.common.IEntityIdentifiable;
import highlevelnets.common.INetElement;

import highlevelnets.hlpn.HlpnPackage;

import highlevelnets.hlpn.impl.HlpnPackageImpl;

import highlevelnets.marking.MarkingPackage;

import highlevelnets.marking.impl.MarkingPackageImpl;

import highlevelnets.npnets.NpnetsPackage;

import highlevelnets.npnets.impl.NpnetsPackageImpl;

import highlevelnets.tokenexpressions.TokenexpressionsPackage;

import highlevelnets.tokenexpressions.impl.TokenexpressionsPackageImpl;

import highlevelnets.tokentypes.TokentypesPackage;

import highlevelnets.tokentypes.impl.TokentypesPackageImpl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class CommonPackageImpl extends EPackageImpl implements CommonPackage {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private EClass iNetElementEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private EClass iEntityIdentifiableEClass = null;

	/**
	 * Creates an instance of the model <b>Package</b>, registered with
	 * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
	 * package URI value.
	 * <p>Note: the correct way to create the package is via the static
	 * factory method {@link #init init()}, which also performs
	 * initialization of the package, or returns the registered package,
	 * if one already exists.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see org.eclipse.emf.ecore.EPackage.Registry
	 * @see highlevelnets.common.CommonPackage#eNS_URI
	 * @see #init()
	 * @generated
	 */
	private CommonPackageImpl() {
		super(eNS_URI, CommonFactory.eINSTANCE);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static boolean isInited = false;

	/**
	 * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
	 * 
	 * <p>This method is used to initialize {@link CommonPackage#eINSTANCE} when that field is accessed.
	 * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #eNS_URI
	 * @see #createPackageContents()
	 * @see #initializePackageContents()
	 * @generated
	 */
	public static CommonPackage init() {
		if (isInited) return (CommonPackage)EPackage.Registry.INSTANCE.getEPackage(CommonPackage.eNS_URI);

		// Obtain or create and register package
		CommonPackageImpl theCommonPackage = (CommonPackageImpl)(EPackage.Registry.INSTANCE.get(eNS_URI) instanceof CommonPackageImpl ? EPackage.Registry.INSTANCE.get(eNS_URI) : new CommonPackageImpl());

		isInited = true;

		// Obtain or create and register interdependencies
		MarkingPackageImpl theMarkingPackage = (MarkingPackageImpl)(EPackage.Registry.INSTANCE.getEPackage(MarkingPackage.eNS_URI) instanceof MarkingPackageImpl ? EPackage.Registry.INSTANCE.getEPackage(MarkingPackage.eNS_URI) : MarkingPackage.eINSTANCE);
		TokentypesPackageImpl theTokentypesPackage = (TokentypesPackageImpl)(EPackage.Registry.INSTANCE.getEPackage(TokentypesPackage.eNS_URI) instanceof TokentypesPackageImpl ? EPackage.Registry.INSTANCE.getEPackage(TokentypesPackage.eNS_URI) : TokentypesPackage.eINSTANCE);
		TokenexpressionsPackageImpl theTokenexpressionsPackage = (TokenexpressionsPackageImpl)(EPackage.Registry.INSTANCE.getEPackage(TokenexpressionsPackage.eNS_URI) instanceof TokenexpressionsPackageImpl ? EPackage.Registry.INSTANCE.getEPackage(TokenexpressionsPackage.eNS_URI) : TokenexpressionsPackage.eINSTANCE);
		HlpnPackageImpl theHlpnPackage = (HlpnPackageImpl)(EPackage.Registry.INSTANCE.getEPackage(HlpnPackage.eNS_URI) instanceof HlpnPackageImpl ? EPackage.Registry.INSTANCE.getEPackage(HlpnPackage.eNS_URI) : HlpnPackage.eINSTANCE);
		NpnetsPackageImpl theNpnetsPackage = (NpnetsPackageImpl)(EPackage.Registry.INSTANCE.getEPackage(NpnetsPackage.eNS_URI) instanceof NpnetsPackageImpl ? EPackage.Registry.INSTANCE.getEPackage(NpnetsPackage.eNS_URI) : NpnetsPackage.eINSTANCE);

		// Create package meta-data objects
		theCommonPackage.createPackageContents();
		theMarkingPackage.createPackageContents();
		theTokentypesPackage.createPackageContents();
		theTokenexpressionsPackage.createPackageContents();
		theHlpnPackage.createPackageContents();
		theNpnetsPackage.createPackageContents();

		// Initialize created meta-data
		theCommonPackage.initializePackageContents();
		theMarkingPackage.initializePackageContents();
		theTokentypesPackage.initializePackageContents();
		theTokenexpressionsPackage.initializePackageContents();
		theHlpnPackage.initializePackageContents();
		theNpnetsPackage.initializePackageContents();

		// Mark meta-data to indicate it can't be changed
		theCommonPackage.freeze();

  
		// Update the registry and return the package
		EPackage.Registry.INSTANCE.put(CommonPackage.eNS_URI, theCommonPackage);
		return theCommonPackage;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EClass getINetElement() {
		return iNetElementEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EAttribute getINetElement_Name() {
		return (EAttribute)iNetElementEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EAttribute getINetElement_Comment() {
		return (EAttribute)iNetElementEClass.getEStructuralFeatures().get(1);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EClass getIEntityIdentifiable() {
		return iEntityIdentifiableEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EAttribute getIEntityIdentifiable_Id() {
		return (EAttribute)iEntityIdentifiableEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CommonFactory getCommonFactory() {
		return (CommonFactory)getEFactoryInstance();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private boolean isCreated = false;

	/**
	 * Creates the meta-model objects for the package.  This method is
	 * guarded to have no affect on any invocation but its first.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void createPackageContents() {
		if (isCreated) return;
		isCreated = true;

		// Create classes and their features
		iNetElementEClass = createEClass(INET_ELEMENT);
		createEAttribute(iNetElementEClass, INET_ELEMENT__NAME);
		createEAttribute(iNetElementEClass, INET_ELEMENT__COMMENT);

		iEntityIdentifiableEClass = createEClass(IENTITY_IDENTIFIABLE);
		createEAttribute(iEntityIdentifiableEClass, IENTITY_IDENTIFIABLE__ID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private boolean isInitialized = false;

	/**
	 * Complete the initialization of the package and its meta-model.  This
	 * method is guarded to have no affect on any invocation but its first.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void initializePackageContents() {
		if (isInitialized) return;
		isInitialized = true;

		// Initialize package
		setName(eNAME);
		setNsPrefix(eNS_PREFIX);
		setNsURI(eNS_URI);

		// Create type parameters

		// Set bounds for type parameters

		// Add supertypes to classes
		iNetElementEClass.getESuperTypes().add(this.getIEntityIdentifiable());

		// Initialize classes and features; add operations and parameters
		initEClass(iNetElementEClass, INetElement.class, "INetElement", IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEAttribute(getINetElement_Name(), ecorePackage.getEString(), "name", null, 0, 1, INetElement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEAttribute(getINetElement_Comment(), ecorePackage.getEString(), "comment", null, 0, 1, INetElement.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(iEntityIdentifiableEClass, IEntityIdentifiable.class, "IEntityIdentifiable", IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEAttribute(getIEntityIdentifiable_Id(), ecorePackage.getEString(), "id", "", 1, 1, IEntityIdentifiable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, IS_ID, IS_UNIQUE, !IS_DERIVED, !IS_ORDERED);

		// Create resource
		createResource(eNS_URI);

		// Create annotations
		// http:///org/eclipse/emf/mapping/xsd2ecore/XSD2Ecore
		createXSD2EcoreAnnotations();
	}

	/**
	 * Initializes the annotations for <b>http:///org/eclipse/emf/mapping/xsd2ecore/XSD2Ecore</b>.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected void createXSD2EcoreAnnotations() {
		String source = "http:///org/eclipse/emf/mapping/xsd2ecore/XSD2Ecore";		
		addAnnotation
		  (iNetElementEClass, 
		   source, 
		   new String[] {
			 "name", "comm",
			 "representation", "element"
		   });
	}

} //CommonPackageImpl
